name: Build Padavan

on: 
  release:
    types: [published]
  push:
    tags:
    - 'v*'
  #  branches: 
  #    - master
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: [started]
env: 
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.WEIXIN_SCKEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: 检测脚本设置
      run: |
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "WXFB_MESSAGE=${WXFB_MESSAGE}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_VMDK=${UPLOAD_VMDK}" >> $GITHUB_ENV
        echo "UPLOAD_IPK=${UPLOAD_IPK}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "UPLOAD_MYPAN=${UPLOAD_MYPAN}" >> $GITHUB_ENV
      
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
        cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget
    - name: Clone source code
      run: |
        git clone --depth=1 https://github.com/gogogojason/rt-n56u.git /opt/rt-n56u
        cd /opt/rt-n56u/toolchain-mipsel
        sh dl_toolchain.sh
        mkdir -p /opt/images/
 
    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "::set-output name=status::success"
        echo "FILE_DATE=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_DATE1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_DATE2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "FILE_DATE3=$(date "+%Y%m%d")" >> $GITHUB_ENV
        
    - name: Build Firmware
      env:
        TNAME: RM2100
      run: |
        cd /opt/rt-n56u/trunk
        if [ ! -f configs/templates/$TNAME.config ] ; then
        echo "configs/templates/$TNAME.config not found "
        exit 1
        fi
        cp -f configs/templates/$TNAME.config .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ################################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ################################################################################################
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #删除配置项MENTOHUST
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #删除配置项SCUTCLIENT
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #删除配置项SS plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config #删除配置项SS server
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #删除配置项DNSFORWARDER
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #删除配置项阿里DDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSOBFS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSOBFS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_V2RAY/d' .config #集成v2ray执行文件（3.8M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TROJAN/d' .config #集成trojan执行文件(1.1M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        sed -i '/CONFIG_FIRMWARE_INCLUDE_KOOLPROXY/d' .config #KP广告过滤
        sed -i '/CONFIG_FIRMWARE_INCLUDE_CADDY/d' .config #在线文件管理服务
        sed -i '/CONFIG_FIRMWARE_INCLUDE_CADDYBIN/d' .config #集成caddu执行文件，此文件有13M,请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config #可以不集成
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WYY/d' .config #网易云解锁
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WYYBIN/d' .config #网易云解锁GO版本执行文件（4M多）注意固件超大小,不集成会自动下载
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ZEROTIER/d' .config #zerotier ~1.3M
        ######################################################################
        #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config #MENTOHUST
        echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n" >> .config #SCUTCLIENT
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y" >> .config #SS plus+
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=y" >> .config # simple-obfs混淆插件
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=y" >> .config #SS server
        echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=y" >> .config #DNSFORWARDER
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=y" >> .config #adbyby plus+
        echo "CONFIG_FIRMWARE_INCLUDE_FRPC=y" >> .config #内网穿透FRPC
        echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #内网穿透FRPS
        echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config #TUNSAFE
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=y" >> .config #阿里DDNS
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=y" >> .config #smartdns
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN=y" >> .config #smartdns二进制文件
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n" >> .config #集成v2ray执行文件（3.8M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=n" >> .config #集成trojan执行文件(1.1M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_KOOLPROXY=y" >> .config #KP广告过滤
        echo "CONFIG_FIRMWARE_INCLUDE_CADDY=y" >> .config #在线文件管理服务
        echo "CONFIG_FIRMWARE_INCLUDE_CADDYBIN=n" >> .config #集成caddu执行文件，此文件有13M,请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
        echo "CONFIG_FIRMWARE_INCLUDE_WYY=y" >> .config #网易云解锁
        echo "CONFIG_FIRMWARE_INCLUDE_WYYBIN=y" >> .config #网易云解锁GO版本执行文件（4M多）注意固件超大小,不集成会自动下载
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y" >> .config #zerotier ~1.3M
        #########################################################################################
        #自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        #格式如下：
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIDLNA/d' .config
        echo "CONFIG_FIRMWARE_INCLUDE_MINIDLNA=y" >> .config
        sed -i '/CONFIG_FIRMWARE_CPU_900MHZ/d' .config
        echo "CONFIG_FIRMWARE_CPU_900MHZ=y" >> .config
        #########################################################################################
        sudo ./clear_tree
        sudo ./build_firmware_modify $TNAME 0
        sudo mkdir -p /artifact/
        sudo mv -f images/*.trx /artifact/
    - name : Upload packages
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: Padavan-packages
        path: /artifact/

    - name: 上传固件到 奶牛快传
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress /artifact/ 2>&1 | tee cowtransfer.log
        echo "::warning file=奶牛快传（$TNAME）::$(cat cowtransfer.log | grep https)"
    - name: 上传固件到 WeTransfer
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress /artifact 2>&1 | tee wetransfer.log
        echo "::warning file=WeTransfer（$TNAME）::$(cat wetransfer.log | grep https)"
        
    - name: 上传固件到网盘
      uses: AEnterprise/rsync-deploy@v1.0 
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} 
        ARGS: -avzr --exclude=
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        FOLDER: ./
        SERVER_IP: ${{ secrets.SSH_HOST }} 
        USERNAME: ${{ secrets.SSH_USERNAME }} 
        SERVER_DESTINATION: /mnt/disk2/appdata/h5ai/Padavan/$TNAME

    - name: 提取发布用的「奶牛快传」和「WeTransfer」的链接
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress /artifact/ 2>&1 | tee cowtransfer.log
        echo "COWTRANSFER_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV 
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress /artifact/ 2>&1 | tee wetransfer.log
        echo "WETRANSFER_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV 
    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: ${{ env.WXFB_MESSAGE }}
        tag_name: ${{ env.FILE_DATE2 }}-$TNAME
        body: |            
            ★  时间 : ${{ env.FILE_DATE1 }}            
            高速下载地址：
            ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
            
            
            ➤ 奶牛快传： ${{ env.COWTRANSFER_URL }}
            
            ➤ WeTransfer： ${{ env.WETRANSFER_URL }}
            
            注:链接有效期为7天，无需注册直接下载.
            
            ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
            
        files: /artifact/*

#    - name: 删除旧的GitHub-workflow
#      uses: ActionsRML/delete-workflow-runs@main
#      with:
#        retain_days: 0
#        keep_minimum_runs: 20    #保留多少个workflow不删除

#    - name: 删除自动发布的旧固件
#      uses: dev-drprasad/delete-older-releases@v0.1.0
#      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
#     with:
#        keep_latest: 5         #保留多少个releases不删除
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

    - name: 完成编译微信通知
      uses: emon100/Action-Serverchan@v2
      if: env.SERVERCHAN_SCKEY == 'true'
      with:
        SCKEY: ${{ secrets.WEIXIN_SCKEY }}
        text: 恭喜$TNAME固件编译成功！
        desp: 您的${{ env.WXFB_MESSAGE }}固件成功编译完成了！

              
              完成时间：${{ env.FILE_DATE1 }}
              
              
              发布地址：${{ env.GITHUB_RELEASE }}
              
              
              奶牛快传：${{ env.COWTRANSFER_URL }}
              
              
              WeTransfer：${{ env.WETRANSFER_URL }}
              
              
              固件已经编译完成 🎈！！！
