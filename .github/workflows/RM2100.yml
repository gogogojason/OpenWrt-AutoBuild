name: 编译RM2100

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'


# 定时触发编译(每天早5点)
  schedule:
    - cron: 0 21 * * *

# 点赞☆Star触发编译
#  watch:
#    types: [started]


env: 
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.WEIXIN_SCKEY }}
  TZ: Asia/Shanghai
  GITHUB_RELEASE: https://github.com/gogogojason/OpenWrt-AutoBuild/releases

jobs: 
  build:
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [All_RM2100,Sim_RM2100,Ap_RM2100]  #[Lean_x86_64,All_RM2100,Sim_RM2100,Ap_RM2100,Lienol_x86_64,]

    steps:
    - name: 准备完成
      uses: actions/checkout@v2

    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "WXFB_MESSAGE=${WXFB_MESSAGE}" >> $GITHUB_ENV
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_VMDK=${UPLOAD_VMDK}" >> $GITHUB_ENV
        echo "UPLOAD_IPK=${UPLOAD_IPK}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
    - name: 开始安装编译所需系统
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq -y install build-essential asciidoc binutils bzip2 gawk gettext git libc6-dev libncurses5 libtinfo-dev libtinfo5 ncurses-doc libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean -y
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
 
    - name: 下载${{matrix.target}}源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "::set-output name=status::success"
        echo "FILE_DATE=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_DATE1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_DATE2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
   
    - name: 加载源,定制文件并生成自定义配置
      run: |
        # 复制配置文件到源码目录
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        echo "执行脚本"
        if [ -f "build/${{matrix.target}}/$CUSTOM_SH" ]; then
        (
          chmod +x build/${{matrix.target}}/$CUSTOM_SH
          /bin/bash "build/${{matrix.target}}/$CUSTOM_SH"
        )
        fi
        echo "复制文件..."
        if [ -n "$(ls -A "build/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -rf build/${{matrix.target}}/files files
         chmod -R 755 build/${{matrix.target}}/files/* ./
        fi
        if [ -n "$(ls -A "build/${{matrix.target}}/sources" 2>/dev/null)" ]; then
         cp -Rf build/${{matrix.target}}/sources/* ./
        fi
        echo "打补丁"
        if [ -n "$(ls -A "build/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "build/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
        fi
        echo "写入配置文件"
         mv build/${{matrix.target}}/$CONFIG_FILE .config
        make defconfig

    - name: SSH远程连接服务器配置固件
      uses: P3TERX/ssh2actions@v1.0.0
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: 下载软件包
      run: |
        cd openwrt && make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
 
    - name: 检查空间使用情况
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -hT
        echo "======================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin
        
    - name: 整理固件文件夹
      id: organizer
      run: |
        mkdir config
        find openwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*kernel1.bin*" | xargs -i mv -f {} packages
        find -name "*manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        find -name "*Image*" | xargs -i mv -f {} packages
        find -name "*rootfs-squashfs*" | xargs -i mv -f {} packages
        find -name "*squashfs-rootfs*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success 
        
    - name: 上传.config配置文件在github空间
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
      with:
        name: .config_${{matrix.target}}_${{ env.FILE_DATE }}
        path: ./config

    - name: 上传固件在github空间
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware_${{matrix.target}}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到「奶牛快传」和「WeTransfer」
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=奶牛快传（${{matrix.target}}）::$(cat cowtransfer.log | grep https)"
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=WeTransfer（${{matrix.target}}）::$(cat wetransfer.log | grep https)"
    
    - name: 提取发布用的「奶牛快传」跟「WeTransfer」的链接
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' || (github.event.inputs.release == 'release' && github.event.inputs.release  != 'false')
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "COWTRANSFER_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV 
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "WETRANSFER_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV     
    
    - name: 自动发布固件
      uses: softprops/action-gh-release@v1
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' || (github.event.inputs.release == 'release' && github.event.inputs.release  != 'false')
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: ${{ env.FILE_DATE1 }} 「 ${{ env.WXFB_MESSAGE }} 」固件
        tag_name: ${{ env.FILE_DATE2 }}
        body: |
            ☆  源码 : ${{ env.REPO_URL }}  <br>
            ☆  分支 : ${{ env.REPO_BRANCH }}  <br>
            ☆  感谢源码作者无私分享！ <br>
            
            🎉 [ ${{ env.WXFB_MESSAGE }} ]固件下载 ✨
            
            💐 奶牛快传(国内高速🚀下载)： ${{ env.COWTRANSFER_URL }}
            
            ⛄ WeTransfer(国外高速🚀下载)： ${{ env.WETRANSFER_URL }}
            
            🌴 链接有效期为7天，无需注册直接下载 🐤
        files: ${{ env.FIRMWARE }}/*
    
    - name: 删除旧的GitHub-workflow
      uses: ActionsRML/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 30    #保留多少个workflow不删除

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 20         #保留多少个releases不删除
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

    - name: 完成编译微信通知
      uses: emon100/Action-Serverchan@v2
      if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true'
      with:
        SCKEY: ${{ secrets.WEIXIN_SCKEY }}
        text: 恭喜${{matrix.target}}固件编译成功！
        desp: 您的${{ env.WXFB_MESSAGE }}固件成功编译完成了！

              
              完成时间：${{ env.FILE_DATE1 }}
              
              
              发布地址：${{ env.GITHUB_RELEASE }}
              
              
              奶牛快传：${{ env.COWTRANSFER_URL }}
              
              
              WeTransfer：${{ env.WETRANSFER_URL }}
              
              
              固件已经编译完成 🎈！！！
